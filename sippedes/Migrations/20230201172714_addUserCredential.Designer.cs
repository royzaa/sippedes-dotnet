// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sippedes.Cores.Database;

#nullable disable

namespace sippedes.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230201172714_addUserCredential")]
    partial class addUserCredential
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sippedes.Cores.Entities.AdminData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("is_active");

                    b.Property<Guid>("UserCredentialId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_credential_id");

                    b.HasKey("Id");

                    b.HasIndex("UserCredentialId");

                    b.ToTable("m_admin_data");
                });

            modelBuilder.Entity("sippedes.Cores.Entities.CivilData", b =>
                {
                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("birthdate");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("blood_type");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("district");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("education");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fullname");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gender");

                    b.Property<string>("NoKK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("no_kk");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("province");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("religion");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("village");

                    b.HasKey("NIK");

                    b.ToTable("m_civil_data");
                });

            modelBuilder.Entity("sippedes.Cores.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("ERole")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("m_role");
                });

            modelBuilder.Entity("sippedes.Cores.Entities.UserCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CivilDataId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("civil_data_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<int>("IsVerifed")
                        .HasColumnType("int")
                        .HasColumnName("is_verifed");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("CivilDataId");

                    b.HasIndex("RoleId");

                    b.ToTable("m_user_credential");
                });

            modelBuilder.Entity("sippedes.Cores.Entities.AdminData", b =>
                {
                    b.HasOne("sippedes.Cores.Entities.UserCredential", "UserCredential")
                        .WithMany()
                        .HasForeignKey("UserCredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCredential");
                });

            modelBuilder.Entity("sippedes.Cores.Entities.UserCredential", b =>
                {
                    b.HasOne("sippedes.Cores.Entities.CivilData", "CivilData")
                        .WithMany()
                        .HasForeignKey("CivilDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sippedes.Cores.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CivilData");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
